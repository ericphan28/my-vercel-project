import { useState, useEffect } from "react"; import { supabase } from "../lib/supabase"; export default function Home() { const [todos, setTodos] = useState([]); const [task, setTask] = useState(""); const [user, setUser] = useState(null); useEffect(() => { async function init() { const { data, error } = await supabase.auth.getUser(); if (error) { console.error("Error getting user:", error); return; } setUser(data.user); if (data.user) { console.log("User ID:", data.user.id); fetchTodos(data.user.id); const channel = supabase.channel("todos").on("postgres_changes", { event: "*", schema: "public", table: "todos", filter: `user_id=eq.${data.user.id}` }, (payload) => { console.log("Realtime update:", payload); fetchTodos(data.user.id); }).subscribe((status) => console.log("Channel status:", status)); return () => { console.log("Unsubscribing channel"); supabase.removeChannel(channel); }; } } init(); }, []); async function fetchTodos(userId) { const { data, error } = await supabase.from("todos").select("*").eq("user_id", userId); if (error) { console.error("Error fetching todos:", error); return; } console.log("Fetched todos:", data); setTodos(data || []); } async function addTodo() { if (!task || !user) return; const { error } = await supabase.from("todos").insert([{ task, user_id: user.id }]); if (error) { console.error("Error adding todo:", error); return; } setTask(""); fetchTodos(user.id); } async function deleteTodo(id) { const { error } = await supabase.from("todos").delete().eq("id", id); if (error) { console.error("Error deleting todo:", error); return; } fetchTodos(user.id); } async function login() { const { error } = await supabase.auth.signInWithPassword({ email: "ericphan28@gmail.com", password: "Tnt@9961266" }); if (error) { console.error("Login error:", error); alert("Đăng nhập thất bại: " + error.message); return; } window.location.reload(); } async function logout() { await supabase.auth.signOut(); window.location.reload(); } return ( <div style={{ padding: "20px" }}> {user ? ( <> <h1>Xin chào, {user.email}</h1> <button onClick={logout}>Đăng xuất</button> <h2>Todo List</h2> <input value={task} onChange={(e) => setTask(e.target.value)} placeholder="Nhập công việc" /> <button onClick={addTodo}>Thêm</button> <ul> {todos.map((todo) => ( <li key={todo.id}> {todo.task} <button onClick={() => deleteTodo(todo.id)}>Xóa</button> </li> ))} </ul> </> ) : ( <> <h1>Đăng nhập để dùng Todo List</h1> <button onClick={login}>Đăng nhập</button> </> )} </div> ); }
